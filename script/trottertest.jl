#=
As a brief Julia tutorial,
    let us quantify the Trotter error associated with Œ©=exp[ùëñŒî (z aÃÇ + h.t.)]

The idea is to decompose z = x + ùëñy, and Œ© as exp[ùëñŒî (x QÃÇ + y PÃÇ)],
    then approximate this as exp(ùëñŒî x QÃÇ) exp(ùëñŒî y PÃÇ),
    each of which can be pre-diagonalized.

=#

using LinearAlgebra
using Random

# DEFINE THE NUMBER OF STATES
n = 3

# CONSTRUCT THE ANNIHILATION OPERATOR (HARMONIC OSCILLATOR NORMALIZATION)
a = zeros((n,n))
for i ‚àà 1:n-1
    a[i,i+1] = ‚àöi
end

# CONSTRUCT CANONICAL OPERATORS
Q = a + a'
P = im*(a - a')

# DIAGONALIZE CANONICAL OPERATORS
ŒõQ, UQ = eigen(Q)
ŒõP, UP = eigen(P)
UQP = UQ' * UP
UPQ = UP' * UQ

# DEFINE FUNCTION TO PERFORM EXPONENTIATION
function exponentiate(x, y, Œî=1.0, p=0)
    if p == 0                   # EXACT EXPONENTIATION
        T = complex(x,y) * a    # CLUSTER OPERATOR, OF SORTS
        exp(im * Œî * (T + T'))
    elseif p == 1               # PRODUCT FORMULA
        exp(im*Œî*x*Q) * exp(im*Œî*y*P)
    elseif p == 2               # SYMMETRIZED PRODUCT FORMULA
        exp(im*Œî*x/2*Q) * exp(im*Œî*y*P) * exp(im*Œî*x/2*Q)
    end
end

# DEFINE FUNCTION TO PERFORM EXPONENTIATION
function prediagonalizedexponentiate(x, y, Œî=1.0, p=0)
    if p == 0                   # EXACT EXPONENTIATION
        T = complex(x,y) * a    # CLUSTER OPERATOR, OF SORTS
        exp(im * Œî * (T + T'))
    elseif p == 1               # PRODUCT FORMULA
        expQ = exp.(im*Œî*x*ŒõQ)
        expP = exp.(im*Œî*y*ŒõQ)
        UQ * Diagonal(expQ) * UQP * Diagonal(expP) * UP'
    elseif p == 2               # SYMMETRIZED PRODUCT FORMULA
        expQ = exp.(im*Œî*x/2*ŒõQ)    # HALVED SO THAT IT FLANKS P FACTOR
        expP = exp.(im*Œî*y*ŒõQ)
        UQ * Diagonal(expQ) * UQP * Diagonal(expP) * UPQ * Diagonal(expQ) * UQ'
    end
end

# DEFINE FUNCTION TO MEASURE DIFFERENCE BETWEEN SOLUTIONS
function distance(A, B)
    # I'm not really sure what to use here...
    opnorm(A-B)
end

# DEFINE EXPERIMENT
function experiment(x, y, Œî)
    exact = exponentiate(x,y,Œî)
    Œµ1 = distance(exponentiate(x,y,Œî,1), exact)
    Œµ2 = distance(exponentiate(x,y,Œî,2), exact)
    Œµ1pd = distance(prediagonalizedexponentiate(x,y,Œî,1), exact)
    Œµ2pd = distance(prediagonalizedexponentiate(x,y,Œî,2), exact)
    return Œµ1, Œµ2, Œµ1pd, Œµ2pd
end

# GENERATE STATISTICS
N = 1000                    # NUMBER OF TRIALS
x = rand(Float64, N)
y = rand(Float64, N)
logŒî = -6*rand(Float64, N)

Œµ = Array{Float64}(undef, (N,4))
for i in 1:N
    Œµ[i,:] .= experiment(x[i], y[i], 10^logŒî[i])
end

# DISPLAY RESULTS
# import Pkg
# Pkg.add("Plots")
using Plots
plt = scatter(logŒî, log10.(Œµ[:,1]))
scatter!(logŒî, log10.(Œµ[:,2]))
scatter!(logŒî, log10.(Œµ[:,3]))
scatter!(logŒî, log10.(Œµ[:,4]))

# gui(plt)
